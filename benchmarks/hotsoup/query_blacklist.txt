######################
# SCHEMA v1

# "Paper" does not have a "contactId" field
68be356a_3b6f02bcac501f9e: SELECT paperId, title FROM Paper, ContactInfo  WHERE (Paper.contactId=ContactInfo.contactId AND  ContactInfo.email=?);
68be356a_dd4e396b6e183da7: SELECT Paper.paperId, Paper.title, Paper.abstract,  ContactInfo.firstName, ContactInfo.lastName,  ContactInfo.email, ContactInfo.affiliation, Paper.authorInformation  FROM Paper,ContactInfo  WHERE Paper.contactId=ContactInfo.contactId AND Paper.timeSubmitted>0  ORDER BY paperId ;
68be356a_3d894009ebe2e4b5: SELECT firstName, lastName, email,  paperId, outcome, title  FROM ContactInfo, Paper  WHERE Paper.outcome>0  AND Paper.contactId=ContactInfo.contactId  ORDER BY paperId ;

# "ReviewRequest" table does not exist
68be356a_19912ac4c5713b3f: SELECT  ContactInfo.firstName, ContactInfo.lastName, ContactInfo.email,  ContactInfo.contactId,  Paper.paperId, Paper.title  from ReviewRequest  join ContactInfo using (contactId)  join Paper using (paperId)  where ContactInfo.contactId=?;
68be356a_8c2996977694d11f: SELECT reviewRequestId, paperId FROM ReviewRequest WHERE paperId=? AND asked=?;
68be356a_fb002e97e8f23f5a: SELECT firstName, lastName, email  FROM ContactInfo join ReviewRequest using (contactId)  WHERE paperId=? and reviewType=?;
68be356a_4fd1ee69b7c34964: SELECT firstName, lastName, email  FROM ContactInfo, ReviewRequest  WHERE ReviewRequest.asked=ContactInfo.contactId  AND ReviewRequest.paperId=?;
68be356a_4dcd3dcda1f733ae: SELECT firstName, lastName, email  FROM ContactInfo join ReviewRequest using (contactId)  WHERE paperId=? and reviewType=?;
68be356a_f5ec10186351c281: SELECT firstName, lastName, email  FROM ContactInfo, ReviewRequest  WHERE ReviewRequest.asked=ContactInfo.contactId  AND ReviewRequest.paperId=?;

# "SecondaryReviewer" table does not exist
68be356a_b31086f24e23935f: SELECT firstName, lastName, email  FROM ContactInfo join SecondaryReviewer using (contactId)  WHERE SecondaryReviewer.paperId=?;
68be356a_f9435e7ef81d74d5: SELECT firstName, lastName, email  FROM ContactInfo join SecondaryReviewer using (contactId)  WHERE SecondaryReviewer.paperId=?;

# AVG() unsupported, alias used in ORDER BY and not correctly resolved
# TODO: we can fix this by (i) having an AVG operator, (ii) removing aliases outside the FROM clause
68be356a_c6b2cf3d8b88c900: SELECT Paper.paperId, Paper.title,  AVG(PaperReview.overAllMerit) as merit  FROM Paper  LEFT JOIN PaperReview  ON PaperReview.paperId=Paper.paperId  WHERE PaperReview.reviewSubmitted>0  GROUP BY PaperReview.paperId  ORDER BY merit DESC, Paper.paperId ;
68be356a_d82aecebfed87c3a: SELECT Paper.paperId, Paper.title,  AVG(PaperGrade.grade) as merit  FROM Paper  LEFT JOIN PaperGrade  ON PaperGrade.paperId=Paper.paperId  GROUP BY PaperGrade.paperId  ORDER BY merit DESC, Paper.paperId ;

# parameter in join condition
68be356a_32e74662fcdec376: SELECT TopicArea.topicId, TopicArea.topicName, TopicInterest.interest FROM TopicArea left join TopicInterest on (TopicInterest.contactId=? and TopicInterest.topicId=TopicArea.topicId);
68be356a_1ab06c9faa4ed0c4: SELECT TopicArea.topicId, TopicArea.topicName, TopicInterest.interest FROM TopicArea left join TopicInterest on (TopicInterest.contactId=? and TopicInterest.topicId=TopicArea.topicId);
68be356a_fd708786fcc78b0d: select TopicArea.topicId, TopicArea.topicName, TopicInterest.interest from TopicArea left join TopicInterest on TopicInterest.contactId=? and TopicInterest.topicId=TopicArea.topicId order by TopicArea.topicName;
68be356a_2209301630b94c80: select TopicArea.topicId, PaperTopic.paperId from TopicArea left join PaperTopic on PaperTopic.paperId=? and PaperTopic.topicId=TopicArea.topicId;
68be356a_9d93f2352449d3a9: select OptionType.optionId, PaperOption.paperId from OptionType left join PaperOption on PaperOption.paperId=? and PaperOption.optionId=OptionType.optionId;

# XXX: don't try to pull reviewSubmitted through COUNT
68be356a_8a61cc3b2a503f81: SELECT count(reviewSubmitted)  FROM PaperReview  WHERE PaperReview.paperId=? AND PaperReview.reviewSubmitted>0 ;
68be356a_4cb03dd450bbd256: SELECT count(reviewSubmitted)  FROM PaperReview  WHERE PaperReview.paperId=? AND PaperReview.reviewSubmitted>0 ;

######################
# SCHEMA v2

# No "reviewRequestId" field in "ReviewRequest"
c80751de_8c2996977694d11f: SELECT reviewRequestId, paperId FROM ReviewRequest WHERE paperId=? AND asked=?;

# "SecondaryReviewer" table does not exist
c80751de_ed3ede91c8770863: SELECT firstName, lastName, email  FROM ContactInfo join SecondaryReviewer using (contactId)  WHERE SecondaryReviewer.paperId=?;

# parameters in join condition
c80751de_4b49110aa7e70b39: select PC1.paperId, PC1.conflictType, PC2.conflictType from PaperConflict PC1 left join PaperConflict PC2 on (PC1.paperId=PC2.paperId and PC1.contactId=? and PC2.contactId=?) where PC1.contactId=?;

######################
# SCHEMA v3

# 28-column compound key required by GROUP_CONCAT
f5077848_d1247076f848ea67: select PaperReview.contactId, count(reviewSubmitted), count(reviewNeedsSubmit), group_concat(overAllMerit), PCMember.contactId as pc from PaperReview join Paper using (paperId) left join PCMember on (PaperReview.contactId=PCMember.contactId) where Paper.timeSubmitted>0 group by PaperReview.contactId;


######################
# SCHEMA v6

# parameter in join condition
6f0a41d1_38b76a6bfd9a9104: select ContactInfo.contactId, reviewType, commentId, conflictType, watch from ContactInfo left join PaperReview on (PaperReview.paperId=? and PaperReview.contactId=ContactInfo.contactId) left join PaperComment on (PaperComment.paperId=? and PaperComment.contactId=ContactInfo.contactId) left join PaperConflict on (PaperConflict.paperId=? and PaperConflict.contactId=ContactInfo.contactId) left join PaperWatch on (PaperWatch.paperId=? and PaperWatch.contactId=ContactInfo.contactId) where ContactInfo.contactId=?;

# count(paperId) only projects one column, and no group by bogocol is created, but can't group by agg col
6f0a41d1_929abaedd32ee211: select count(paperId) from PaperConflict where paperId=? and conflictType=?;


######################
# SCHEMA v15

# count(paperId) only projects one column, and no group by bogocol is created, but can't group by agg col
# XXX: why is the hash different to the identical query above?!
3491de61_af778910f8779b0d: select count(paperId) from PaperConflict where paperId=? and conflictType=?;


######################
# SCHEMA v21

# parameter in join condition
da577b40_b2c36acdac2c9363: select ContactInfo.contactId, reviewType, commentId, conflictType, watch from ContactInfo left join PaperReview on (PaperReview.paperId=? and PaperReview.contactId=ContactInfo.contactId) left join PaperComment on (PaperComment.paperId=? and PaperComment.contactId=ContactInfo.contactId) left join PaperConflict on (PaperConflict.paperId=? and PaperConflict.contactId=ContactInfo.contactId) left join PaperWatch on (PaperWatch.paperId=? and PaperWatch.contactId=ContactInfo.contactId) where ContactInfo.contactId=?;

# inequality on parameter unsupported
da577b40_99b7f6c7df7cf3d3: select count(paperId) from PaperConflict where paperId=? and conflictType>=?;


######################
# SCHEMA v22

# parameter in join condition
# XXX: why is the hash different to the identical query in v21?
5063baac_b08881033ef665a3: select ContactInfo.contactId, reviewType, commentId, conflictType, watch from ContactInfo left join PaperReview on (PaperReview.paperId=? and PaperReview.contactId=ContactInfo.contactId) left join PaperComment on (PaperComment.paperId=? and PaperComment.contactId=ContactInfo.contactId) left join PaperConflict on (PaperConflict.paperId=? and PaperConflict.contactId=ContactInfo.contactId) left join PaperWatch on (PaperWatch.paperId=? and PaperWatch.contactId=ContactInfo.contactId) where ContactInfo.contactId=?;


######################
# SCHEMA v35

# parameter in join condition
# XXX: why is the hash different to the identical query in v21 and v27?
ff0cae2d_476a3599e7eccc5c: select ContactInfo.contactId, reviewType, commentId, conflictType, watch from ContactInfo left join PaperReview on (PaperReview.paperId=? and PaperReview.contactId=ContactInfo.contactId) left join PaperComment on (PaperComment.paperId=? and PaperComment.contactId=ContactInfo.contactId) left join PaperConflict on (PaperConflict.paperId=? and PaperConflict.contactId=ContactInfo.contactId) left join PaperWatch on (PaperWatch.paperId=? and PaperWatch.contactId=ContactInfo.contactId) where ContactInfo.contactId=?;

# cannot group by agg columns (star expansion bug)
ff0cae2d_71e181bd9892d0e5: select topicId, interest, count(*) from TopicInterest group by topicId, interest;


######################
# SCHEMA v37

# Invalid WHERE clause
91b079ef_cb3631c07b57bf0d: select paperId, title, authorInformation from Paper where ?;


######################
# SCHEMA v53

# Invalid WHERE clause
aa64f270_f56723cd6095f784: select commentId from PaperComment where paperId=? and ?;


######################
# SCHEMA v55

# Projecting a literal unsupported
ddf3f9aa_4d0ebc809119b9c8: select paperId, 0 from PaperConflict where conflictType!=0 and contactId=?;

# Invalid WHERE clause
ddf3f9aa_e88d9d0bd9664523: select Paper.paperId, title, authorInformation from Paper where ?;


######################
# SCHEMA v62

# Projecting a literal unsupported
# XXX: why is the hash different to the identical query in v55?
52ebdf90_8aae10f861bf3995: select paperId, 0 from PaperConflict where conflictType!=0 and contactId=?;


######################
# SCHEMA v67

# Projecting a literal unsupported
8579cf2a_3c16ee09fd8c3cd4: select paperId, 0 from PaperConflict where conflictType>0 and contactId=?;


######################
# SCHEMA v68

# Projecting a literal unsupported
# XXX: why is the hash different to the identical query in v67?
15fe1caa_8ebaa6807805d74f: select paperId, 0 from PaperConflict where conflictType>0 and contactId=?;


######################
# SCHEMA v70

# Invalid WHERE clause
b6390b24_5c42e0b048d9ac40: select * from ContactInfo where ? and contactId;


######################
# SCHEMA v72

# cannot group by agg columns (preference pushed through group by for filter)
14d02c65_a922d98552894f64: select contactId, count(preference) from PaperReviewPreference where preference!=0 group by contactId;


######################
# SCHEMA v75

# parameter in join condition
b10814f6_266a1206304bf998: select PCMember.contactId, count(reviewId)                 from PCMember left join PaperReview on (PaperReview.contactId=PCMember.contactId and PaperReview.reviewType=?)                 group by PCMember.contactId;

# Invalid WHERE clause
b10814f6_bdd16abba5e39051: select Paper.paperId, title, authorInformation from Paper where ?;


######################
# SCHEMA v76

# No column named "id" in "ContactInfo"
6078b8ff_9b0d846534e977c8: select email from ContactInfo where id=?;


######################
# SCHEMA v77

# No column named "id" in "ContactInfo"
cb8ee5a2_905ff475a1c9cd4b: select email from ContactInfo where id=?;

# Projecting a literal unsupported
# XXX: why is the hash different to the identical query in v68?
cb8ee5a2_bdbff331e9335091: select paperId, 0 from PaperConflict where conflictType>0 and contactId=?;


######################
# SCHEMA v78

# Invalid WHERE clause
d12323a6_442445b50d22f669: select paperId, contactId from PaperConflict where paperId;
d12323a6_568e5051af8da71d: select Paper.paperId, title, authorInformation from Paper where ?;

# Projecting a literal unsupported
# XXX: why is the hash different to the identical query in v77?
d12323a6_b87ff94d03c4aa02: select paperId, 0 from PaperConflict where conflictType>0 and contactId=?;


######################
# SCHEMA v80

# No column named "id" in "ContactInfo"
f6efba71_e54dc2994491482b: select email from ContactInfo where id=?;


######################
# SCHEMA v81

# No column named "id" in "ContactInfo"
f836fe9b_2a2cf1d31f05c73a: select email from ContactInfo where id=?;


######################
# SCHEMA v82

# No column named "contactDbId" in "ContactInfo"
4c4b747b_802fc3c769413fef: select * from ContactInfo where contactDbId=?;

# Invalid WHERE clause
4c4b747b_12a38741990097bf: select paperId, title, mimetype from Paper where paperId;
4c4b747b_4427c456d8d134bd: select Paper.paperId, title, authorInformation from Paper where ?;


######################
# SCHEMA v83

# Invalid WHERE clause
7024f487_e59ec780c2c0ecc0: select paperId from PaperComment where commentId;


######################
# SCHEMA v86

# No column named "contactDbId" in "ContactInfo"
17cbae06_f68467e747692c24: select * from ContactInfo where contactDbId=?;


######################
# SCHEMA v89

# Invalid WHERE clause
40d35695_3371ab14a8a96a34: select paperId from PaperComment where commentId;


######################
# SCHEMA v94

# Parameter in join predicate
18ef8776_29bcc9d26797588a: select ContactInfo.contactDbId, Conferences.confid, roles             from ContactInfo             left join Conferences on (Conferences.`dbname`=?)             left join Roles on (Roles.contactDbId=ContactInfo.contactDbId and Roles.confid=Conferences.confid)             where email=?;


######################
# SCHEMA v95

# Invalid WHERE clause
ab4bdf1b_4ef5c1036344dbbe: select paperId from PaperComment where commentId;


######################
# SCHEMA v97

# Parameter in join predicate
d14c4391_8d2513c85f47c7af: select ContactInfo.contactDbId, Conferences.confid, roles             from ContactInfo             left join Conferences on (Conferences.`dbname`=?)             left join Roles on (Roles.contactDbId=ContactInfo.contactDbId and Roles.confid=Conferences.confid)             where email=?;


######################
# SCHEMA v99

# Parameter in join predicate
d50d5846_4fe39a84147979ab: select ContactInfo.contactDbId, Conferences.confid, roles             from ContactInfo             left join Conferences on (Conferences.`dbname`=?)             left join Roles on (Roles.contactDbId=ContactInfo.contactDbId and Roles.confid=Conferences.confid)             where email=?;

# Invalid WHERE clause
d50d5846_b553d49dd13b9e2c: select paperId from PaperComment where commentId;


######################
# SCHEMA v112

# Invalid WHERE clause
553f6523_440b0a98197783c4: select paperId from PaperComment where commentId;


######################
# SCHEMA v114

# Invalid WHERE clause
49149615_93851b502c67d6af: select paperId from PaperComment where commentId;


######################
# SCHEMA v120

# Invalid WHERE clause
026186b2_a62d8a6051c85574: select paperId from PaperComment where commentId;


######################
# SCHEMA v123

# Invalid WHERE clause
d1c333d6_78e1738aa94cb88b: select paperId from PaperComment where commentId;


######################
# SCHEMA v126

# Invalid WHERE clause
27ac4dbc_d652321c5c4e8c36: select paperId from PaperComment where commentId;


######################
# SCHEMA v130

# Invalid WHERE clause
543e907b_42c0ffa175c06e42: select paperId from Paper where ? limit 1;

# Parameter in join predicate
543e907b_f874259ccb56273d: select ContactInfo.contactDbId, Conferences.confid, roles, password             from ContactInfo             left join Conferences on (Conferences.`dbname`=?)             left join Roles on (Roles.contactDbId=ContactInfo.contactDbId and Roles.confid=Conferences.confid)             where email=?;


######################
# SCHEMA v131

# Invalid WHERE clause
b54ccbf4_bca27f54e270ba35: select paperId from PaperComment where commentId;


######################
# SCHEMA v132

# Invalid WHERE clause
6da41902_1d4466fcbf80d18c: select paperId from PaperComment where commentId;


######################
# SCHEMA v136

# Invalid WHERE clause
31006bda_abb7711506239b3a: select paperId from PaperComment where commentId;


######################
# SCHEMA v140

# Invalid WHERE clause
aad8bf44_fa80a57cb24e4c1b: select paperId from PaperComment where commentId;


######################
# SCHEMA v141

# Invalid WHERE clause
a3a15ec8_3f5a537d8d675d6f: select paperId from PaperComment where commentId;


######################
# SCHEMA v143

# Invalid WHERE clause
1a90cd38_75dfadbbcad89aec: select paperId from PaperComment where commentId;


######################
# SCHEMA v145

# Invalid WHERE clause
b6fea998_20af468cc9113d48: select paperId from PaperComment where commentId;


######################
# SCHEMA v146

# Invalid WHERE clause
f5a359c3_98f9df7fcd6598a: select paperId from PaperComment where commentId;


######################
# SCHEMA v147

# Invalid WHERE clause
eb0bc9ee_b533b92b74a40db0: select paperId from PaperComment where commentId;


######################
# SCHEMA v161

# "Conferences" table does not exist in schema
a1ac837b_861fc461f61a0335: select confid from Conferences where `dbname`=?;

# Invalid WHERE clause
a1ac837b_f6bc8469eb1026bd: select paperId from Paper where ? limit 1;
a1ac837b_3b8c44a3b50fcc9: select contactId from ContactInfo where ?;

# No column "contactDbId" on "ContactInfo"
a1ac837b_8bc426139d40387d: select * from ContactInfo where contactDbId=?;

# Complex "ON" predicate unsupported, "Conferences" table unknown
a1ac837b_e617f8fab63f1a86: select ContactInfo.contactDbId, Conferences.confid, roles, password             from ContactInfo             left join Conferences on (Conferences.`dbname`=?)             left join Roles on (Roles.contactDbId=ContactInfo.contactDbId and Roles.confid=Conferences.confid)             where email=?;

# Unknown tables "ReviewFormField" and "ReviewFormOptions"
a1ac837b_bdc9619ab3be253d: select * from ReviewFormField where fieldName!='outcome';
a1ac837b_2c19c35e41b44e16: select * from ReviewFormOptions where fieldName!='outcome' order by level asc;
a1ac837b_60427ac36f75cc9c: select * from OptionType;
a1ac837b_48dc657a24ccccb2: select * from ContactAddress;
a1ac837b_8d679fcc66af4f50: select * from ReviewFormOptions where fieldName='outcome';
